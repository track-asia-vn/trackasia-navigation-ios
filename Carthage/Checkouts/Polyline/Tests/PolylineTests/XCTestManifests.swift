#if !canImport(ObjectiveC)
import XCTest

extension FunctionalPolylineTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FunctionalPolylineTests = [
        ("testAnotherValidPolylineShouldReturnValidLocationArray", testAnotherValidPolylineShouldReturnValidLocationArray),
        ("testDecodingPolyline", testDecodingPolyline),
        ("testEmptyArrayShouldBeEmptyString", testEmptyArrayShouldBeEmptyString),
        ("testEmptyLevelsShouldBeEmptyLevelArray", testEmptyLevelsShouldBeEmptyLevelArray),
        ("testEmptylevelsShouldBeEmptyString", testEmptylevelsShouldBeEmptyString),
        ("testEmptyPolylineShouldBeEmptyLocationArray", testEmptyPolylineShouldBeEmptyLocationArray),
        ("testHighNegativeRoundedValuesShouldBeEncodedProperly", testHighNegativeRoundedValuesShouldBeEncodedProperly),
        ("testHighRoundedValuesShouldBeEncodedProperly", testHighRoundedValuesShouldBeEncodedProperly),
        ("testInvalidLevelsShouldReturnNilLevelArray", testInvalidLevelsShouldReturnNilLevelArray),
        ("testInvalidPolylineShouldReturnEmptyLocationArray", testInvalidPolylineShouldReturnEmptyLocationArray),
        ("testLocationsArrayShouldBeEncodedProperly", testLocationsArrayShouldBeEncodedProperly),
        ("testLowNegativeRoundedValuesShouldBeEncodedProperly", testLowNegativeRoundedValuesShouldBeEncodedProperly),
        ("testLowRoundedValuesShouldBeEncodedProperly", testLowRoundedValuesShouldBeEncodedProperly),
        ("testMidNegativeRoundedValuesShouldBeEncodedProperly", testMidNegativeRoundedValuesShouldBeEncodedProperly),
        ("testMidRoundedValuesShouldBeEncodedProperly", testMidRoundedValuesShouldBeEncodedProperly),
        ("testMinimalNegativeDifferenceShouldBeEncodedProperly", testMinimalNegativeDifferenceShouldBeEncodedProperly),
        ("testMinimalPositiveDifferenceShouldBeEncodedProperly", testMinimalPositiveDifferenceShouldBeEncodedProperly),
        ("testSmallDecrementLocationArrayShouldBeEncodedProperly", testSmallDecrementLocationArrayShouldBeEncodedProperly),
        ("testSmallIncrementLocationArrayShouldBeEncodedProperly", testSmallIncrementLocationArrayShouldBeEncodedProperly),
        ("testValidlevelsShouldBeEncodedProperly", testValidlevelsShouldBeEncodedProperly),
        ("testValidLevelsShouldReturnValidLevelArray", testValidLevelsShouldReturnValidLevelArray),
        ("testValidPolylineShouldReturnValidLocationArray", testValidPolylineShouldReturnValidLocationArray),
        ("testZeroShouldBeEncodedProperly", testZeroShouldBeEncodedProperly),
    ]
}

extension PolylineTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PolylineTests = [
        ("testAnotherValidPolylineShouldReturnValidLocationArray", testAnotherValidPolylineShouldReturnValidLocationArray),
        ("testCoordinatesEncoding", testCoordinatesEncoding),
        ("testEmptyArrayShouldBeEmptyString", testEmptyArrayShouldBeEmptyString),
        ("testEmptyLevelsShouldBeEmptyLevelArray", testEmptyLevelsShouldBeEmptyLevelArray),
        ("testEmptylevelsShouldBeEmptyString", testEmptylevelsShouldBeEmptyString),
        ("testEmptyPolylineConvertionShouldBeEmptyMKPolyline", testEmptyPolylineConvertionShouldBeEmptyMKPolyline),
        ("testEmptyPolylineShouldBeEmptyLocationArray", testEmptyPolylineShouldBeEmptyLocationArray),
        ("testHighNegativeRoundedValuesShouldBeEncodedProperly", testHighNegativeRoundedValuesShouldBeEncodedProperly),
        ("testHighRoundedValuesShouldBeEncodedProperly", testHighRoundedValuesShouldBeEncodedProperly),
        ("testInvalidLevelsShouldReturnNilLevelArray", testInvalidLevelsShouldReturnNilLevelArray),
        ("testInvalidPolylineShouldReturnNil", testInvalidPolylineShouldReturnNil),
        ("testLevelDecoding", testLevelDecoding),
        ("testLevelEncoding", testLevelEncoding),
        ("testLimitValueIsProperlyEncoded", testLimitValueIsProperlyEncoded),
        ("testLocationsArrayShouldBeEncodedProperly", testLocationsArrayShouldBeEncodedProperly),
        ("testLocationsEncoding", testLocationsEncoding),
        ("testLowNegativeRoundedValuesShouldBeEncodedProperly", testLowNegativeRoundedValuesShouldBeEncodedProperly),
        ("testLowRoundedValuesShouldBeEncodedProperly", testLowRoundedValuesShouldBeEncodedProperly),
        ("testMidNegativeRoundedValuesShouldBeEncodedProperly", testMidNegativeRoundedValuesShouldBeEncodedProperly),
        ("testMidRoundedValuesShouldBeEncodedProperly", testMidRoundedValuesShouldBeEncodedProperly),
        ("testMinimalNegativeDifferenceShouldBeEncodedProperly", testMinimalNegativeDifferenceShouldBeEncodedProperly),
        ("testMinimalPositiveDifferenceShouldBeEncodedProperly", testMinimalPositiveDifferenceShouldBeEncodedProperly),
        ("testNillevelsShouldBeNil", testNillevelsShouldBeNil),
        ("testPerformances", testPerformances),
        ("testPolylineConvertionToMKPolyline", testPolylineConvertionToMKPolyline),
        ("testPolylineConvertionToMKPolylineWhenEncodingFailed", testPolylineConvertionToMKPolylineWhenEncodingFailed),
        ("testPolylineDecodingToCoordinate", testPolylineDecodingToCoordinate),
        ("testPolylineDecodingToLocations", testPolylineDecodingToLocations),
        ("testPrecision", testPrecision),
        ("testPrecisionIsUsedProperly", testPrecisionIsUsedProperly),
        ("testPrecisionShouldBeUsedProperlyInDecoding", testPrecisionShouldBeUsedProperlyInDecoding),
        ("testPrecisionShouldBeUsedProperlyInEncoding", testPrecisionShouldBeUsedProperlyInEncoding),
        ("testSmallDecrementLocationArrayShouldBeEncodedProperly", testSmallDecrementLocationArrayShouldBeEncodedProperly),
        ("testSmallIncrementLocationArrayShouldBeEncodedProperly", testSmallIncrementLocationArrayShouldBeEncodedProperly),
        ("testSmallNegativeDifferencesShouldBeEncodedProperly", testSmallNegativeDifferencesShouldBeEncodedProperly),
        ("testValidlevelsShouldBeEncodedProperly", testValidlevelsShouldBeEncodedProperly),
        ("testValidLevelsShouldReturnValidLevelArray", testValidLevelsShouldReturnValidLevelArray),
        ("testValidPolylineShouldReturnValidLocationArray", testValidPolylineShouldReturnValidLocationArray),
        ("testZeroShouldBeEncodedProperly", testZeroShouldBeEncodedProperly),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(FunctionalPolylineTests.__allTests__FunctionalPolylineTests),
        testCase(PolylineTests.__allTests__PolylineTests),
    ]
}
#endif
